// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"
	time "time"

	v8 "github.com/Nerzal/gocloak/v8"
	gomock "github.com/golang/mock/gomock"
	dto "gitlab.com/a5805/ondeu/ondeu-back/pkg/modules/dto"
)

// MockDocumentService is a mock of DocumentService interface.
type MockDocumentService struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentServiceMockRecorder
}

// MockDocumentServiceMockRecorder is the mock recorder for MockDocumentService.
type MockDocumentServiceMockRecorder struct {
	mock *MockDocumentService
}

// NewMockDocumentService creates a new mock instance.
func NewMockDocumentService(ctrl *gomock.Controller) *MockDocumentService {
	mock := &MockDocumentService{ctrl: ctrl}
	mock.recorder = &MockDocumentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentService) EXPECT() *MockDocumentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocumentService) Create(ctx context.Context, in dto.Document, file *multipart.FileHeader) (dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in, file)
	ret0, _ := ret[0].(dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDocumentServiceMockRecorder) Create(ctx, in, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentService)(nil).Create), ctx, in, file)
}

// Delete mocks base method.
func (m *MockDocumentService) Delete(ctx context.Context, doc dto.Document) (dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, doc)
	ret0, _ := ret[0].(dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentServiceMockRecorder) Delete(ctx, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentService)(nil).Delete), ctx, doc)
}

// Get mocks base method.
func (m *MockDocumentService) Get(ctx context.Context, doc dto.Document, download bool) (dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, doc, download)
	ret0, _ := ret[0].(dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDocumentServiceMockRecorder) Get(ctx, doc, download interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentService)(nil).Get), ctx, doc, download)
}

// ListByGroups mocks base method.
func (m *MockDocumentService) ListByGroups(ctx context.Context, ids []uint) ([]dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGroups", ctx, ids)
	ret0, _ := ret[0].([]dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGroups indicates an expected call of ListByGroups.
func (mr *MockDocumentServiceMockRecorder) ListByGroups(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGroups", reflect.TypeOf((*MockDocumentService)(nil).ListByGroups), ctx, ids)
}

// ListByTree mocks base method.
func (m *MockDocumentService) ListByTree(ctx context.Context, ids []uint) ([]dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTree", ctx, ids)
	ret0, _ := ret[0].([]dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTree indicates an expected call of ListByTree.
func (mr *MockDocumentServiceMockRecorder) ListByTree(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTree", reflect.TypeOf((*MockDocumentService)(nil).ListByTree), ctx, ids)
}

// Share mocks base method.
func (m *MockDocumentService) Share(ctx context.Context, doc dto.Document, duration time.Duration) (dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Share", ctx, doc, duration)
	ret0, _ := ret[0].(dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Share indicates an expected call of Share.
func (mr *MockDocumentServiceMockRecorder) Share(ctx, doc, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Share", reflect.TypeOf((*MockDocumentService)(nil).Share), ctx, doc, duration)
}

// Update mocks base method.
func (m *MockDocumentService) Update(ctx context.Context, doc dto.Document) (dto.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, doc)
	ret0, _ := ret[0].(dto.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDocumentServiceMockRecorder) Update(ctx, doc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDocumentService)(nil).Update), ctx, doc)
}

// MockTreeService is a mock of TreeService interface.
type MockTreeService struct {
	ctrl     *gomock.Controller
	recorder *MockTreeServiceMockRecorder
}

// MockTreeServiceMockRecorder is the mock recorder for MockTreeService.
type MockTreeServiceMockRecorder struct {
	mock *MockTreeService
}

// NewMockTreeService creates a new mock instance.
func NewMockTreeService(ctrl *gomock.Controller) *MockTreeService {
	mock := &MockTreeService{ctrl: ctrl}
	mock.recorder = &MockTreeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeService) EXPECT() *MockTreeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTreeService) Create(ctx context.Context, tree dto.Tree) (dto.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tree)
	ret0, _ := ret[0].(dto.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTreeServiceMockRecorder) Create(ctx, tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTreeService)(nil).Create), ctx, tree)
}

// Delete mocks base method.
func (m *MockTreeService) Delete(ctx context.Context, tree dto.Tree) (dto.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tree)
	ret0, _ := ret[0].(dto.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTreeServiceMockRecorder) Delete(ctx, tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTreeService)(nil).Delete), ctx, tree)
}

// FormTree mocks base method.
func (m *MockTreeService) FormTree(ctx context.Context, trees []dto.Tree, docs []dto.Document) []dto.Tree {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormTree", ctx, trees, docs)
	ret0, _ := ret[0].([]dto.Tree)
	return ret0
}

// FormTree indicates an expected call of FormTree.
func (mr *MockTreeServiceMockRecorder) FormTree(ctx, trees, docs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormTree", reflect.TypeOf((*MockTreeService)(nil).FormTree), ctx, trees, docs)
}

// Get mocks base method.
func (m *MockTreeService) Get(ctx context.Context, tree dto.Tree) (dto.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tree)
	ret0, _ := ret[0].(dto.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTreeServiceMockRecorder) Get(ctx, tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTreeService)(nil).Get), ctx, tree)
}

// GetTreeIDs mocks base method.
func (m *MockTreeService) GetTreeIDs(ctx context.Context, trees []dto.Tree) []uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeIDs", ctx, trees)
	ret0, _ := ret[0].([]uint)
	return ret0
}

// GetTreeIDs indicates an expected call of GetTreeIDs.
func (mr *MockTreeServiceMockRecorder) GetTreeIDs(ctx, trees interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeIDs", reflect.TypeOf((*MockTreeService)(nil).GetTreeIDs), ctx, trees)
}

// List mocks base method.
func (m *MockTreeService) List(ctx context.Context, tree dto.Tree) ([]dto.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, tree)
	ret0, _ := ret[0].([]dto.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTreeServiceMockRecorder) List(ctx, tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTreeService)(nil).List), ctx, tree)
}

// Update mocks base method.
func (m *MockTreeService) Update(ctx context.Context, tree dto.Tree) (dto.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tree)
	ret0, _ := ret[0].(dto.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTreeServiceMockRecorder) Update(ctx, tree interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTreeService)(nil).Update), ctx, tree)
}

// MockInformationService is a mock of InformationService interface.
type MockInformationService struct {
	ctrl     *gomock.Controller
	recorder *MockInformationServiceMockRecorder
}

// MockInformationServiceMockRecorder is the mock recorder for MockInformationService.
type MockInformationServiceMockRecorder struct {
	mock *MockInformationService
}

// NewMockInformationService creates a new mock instance.
func NewMockInformationService(ctrl *gomock.Controller) *MockInformationService {
	mock := &MockInformationService{ctrl: ctrl}
	mock.recorder = &MockInformationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformationService) EXPECT() *MockInformationServiceMockRecorder {
	return m.recorder
}

// GetRoles mocks base method.
func (m *MockInformationService) GetRoles(ctx context.Context) ([]*v8.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx)
	ret0, _ := ret[0].([]*v8.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockInformationServiceMockRecorder) GetRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockInformationService)(nil).GetRoles), ctx)
}
